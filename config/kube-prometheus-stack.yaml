defaultRules:
  rules:
    # In a single node cluster resources will always be overcommited
    kubernetesResources: false
# RKE, cluster in docker is still experimental ðŸ˜­
    # kubeScheduler: false
# kubelet:
# Needs prometheusOperator.kubeletService.enabled false as well ðŸ¤¯
#   enabled: false
# kubeControllerManager:
#   enabled: false
# End RKE ðŸ˜­
prometheus:
  prometheusSpec:
    retentionSize: 25GB
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 30Gi
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
    hosts:
    - prometheus.jetersen.dev
    tls:
    - hosts:
      - prometheus.jetersen.dev
      secretName: prometheus.jetersen.dev-tls
prometheusOperator:
  # kubeletService:
# More RKE ðŸ˜­
    # enabled: false
# End RKE ðŸ˜­
  admissionWebhooks:
    enabled: false
  tlsProxy:
    enabled: false
  createCustomResource: false
grafana:
  deploymentStrategy:
    type: Recreate
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
    hosts:
    - grafana.jetersen.dev
    tls:
    - hosts:
      - grafana.jetersen.dev
      secretName: grafana.jetersen.dev-tls
  persistence:
    type: pvc
    enabled: true
    accessModes:
      - ReadWriteOnce
    size: 1Gi
    finalizers:
      - kubernetes.io/pvc-protection
  rbac:
    pspEnabled: false
  grafana.ini:
    server:
      root_url: https://grafana.jetersen.dev
    auth.generic_oauth:
      enabled: "true"
      client_id: {{ .Values.dexClients.grafana.id }}
      client_secret: {{ .Values.dexClients.grafana.secret }}
      scopes: openid profile email groups
      auth_url: https://dex.jetersen.dev/dex/auth
      token_url: https://dex.jetersen.dev/dex/token
      allow_sign_up: true
  additionalDataSources:
  - name: loki
    access: proxy
    orgId: 1
    type: loki
    url: http://loki.loki:3100/
    version: 1
    jsonData:
      maxLines: 5000
alertmanager:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
    hosts:
    - alertmanager.jetersen.dev
    tls:
    - hosts:
      - alertmanager.jetersen.dev
      secretName: alertmanager.jetersen.dev-tls
  config:
    route:
      group_by: ['alertname', 'service']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'null'
      routes:
      - receiver: 'null'
        match_re:
          alertname: Watchdog
